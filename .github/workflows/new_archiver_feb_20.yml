name: Archive URLs (Feb 20)
on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'  # Run every hour
  push:
    paths:
      - 'pasted_urls.txt'

jobs:
  archive:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: pip install beautifulsoup4 requests
      
      - name: Extract URLs
        run: |
          python3 - <<EOF
          import re
          import sys
          
          def extract_urls(filename):
              with open(filename, 'r', encoding='utf-8') as f:
                  content = f.read()
              
              # URL pattern matching
              url_pattern = r'https?://[^\s<>"\']+'
              urls = re.findall(url_pattern, content)
              
              # Write unique URLs to file
              with open('all_urls.txt', 'w', encoding='utf-8') as f:
                  for url in sorted(set(urls)):
                      f.write(f"{url}\n")
          
          extract_urls('pasted_urls.txt')
          EOF
      
      - name: Archive URLs
        run: |
          # Get original hash
          original_hash=$(git hash-object pasted_urls.txt || echo "")
          
          # Initialize files
          touch already_archived.txt processed_urls.txt
          
          # Pick and process 1000 random URLs
          shuf -n 1000 all_urls.txt | while IFS= read -r url || [ -n "$url" ]; do 
            if [ -z "$url" ]; then
              continue
            fi
            
            echo "$url" >> processed_urls.txt
            
            if [[ "$url" == *"reddit.com"* && "$url" != *"old.reddit.com"* ]]; then
              old_url=$(echo "$url" | sed 's/reddit.com/old.reddit.com/')
              urls=("$url" "$old_url")
            else
              urls=("$url")
            fi
            
            for process_url in "${urls[@]}"; do
              # Skip if URL is empty
              if [ -z "$process_url" ]; then
                continue
              fi
              
              # Skip if already archived
              if grep -Fxq "$process_url" already_archived.txt 2>/dev/null; then
                echo "$(date): Already archived: $process_url"
                continue
              fi
              
              # Check archive status with error handling
              archived=$(curl -sS --max-time 30 "https://web.archive.org/cdx/search/cdx?url=$process_url&output=json&limit=1" || echo "error")
              if [ "$archived" = "error" ]; then
                echo "$(date): Error checking archive status for: $process_url"
                continue
              fi
              
              if [ "$archived" = "[]" ]; then
                echo "$(date): Archiving: $process_url"
                if curl -sS --max-time 30 "https://web.archive.org/save/$process_url" > /dev/null; then
                  echo "$process_url" >> already_archived.txt
                  sleep 2
                else
                  echo "$(date): Failed to archive: $process_url"
                fi
              else
                echo "$(date): Already in Internet Archive: $process_url"
                echo "$process_url" >> already_archived.txt
              fi
            done
          done || true
          
          # Update files if no conflicts
          current_hash=$(git hash-object pasted_urls.txt 2>/dev/null || echo "")
          if [ "$original_hash" = "$current_hash" ]; then
            sort -u already_archived.txt -o already_archived.txt 2>/dev/null || true
            if [ -s processed_urls.txt ]; then
              grep -vxFf processed_urls.txt all_urls.txt 2>/dev/null | sort -u > pasted_urls.txt || true
            fi
            git add pasted_urls.txt already_archived.txt
            git commit -m "Update archived URLs and remaining URLs" && git push || echo "Skipping commit due to conflict"
          fi
          
          # Cleanup
          rm -f processed_urls.txt all_urls.txt
