name: Archive URLs (Feb 22)
on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'
  push:
    paths:
      - 'pasted_urls.txt'

jobs:
  archive:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: pip install beautifulsoup4 requests urllib3

      - name: Extract and Scrape URLs
        run: |
          python3 - <<EOF
          import re
          import sys
          import time
          import requests
          from bs4 import BeautifulSoup
          from collections import deque
          from urllib.parse import urljoin, urlparse
          
          def is_valid_url(url):
              try:
                  result = urlparse(url)
                  return all([result.scheme, result.netloc])
              except:
                  return False
          
          def extract_urls(filename):
              try:
                  with open(filename, 'r', encoding='utf-8') as f:
                      content = f.read()
                  
                  url_pattern = r'https?://[^\s<>"\']+'
                  return sorted(set(re.findall(url_pattern, content)))
              except:
                  return []
          
          def check_already_archived(url, already_archived_urls):
              # Check if URL is in already_archived.txt
              if url in already_archived_urls:
                  print(f"Already in already_archived.txt: {url}")
                  return True
              
              # Check with Internet Archive API
              try:
                  response = requests.get(
                      f"https://web.archive.org/cdx/search/cdx?url={url}&output=json&limit=1",
                      timeout=30
                  )
                  response.raise_for_status()
                  if response.text != "[]":
                      print(f"Already in Internet Archive: {url}")
                      # Add to already_archived.txt
                      with open('already_archived.txt', 'a', encoding='utf-8') as f:
                          f.write(f"{url}\n")
                      return True
              except Exception as e:
                  print(f"Error checking archive status for {url}: {str(e)}")
                  # On error, be cautious and don't consider it as archived
                  return False
              
              return False
          
          def scrape_mecabricks(already_archived_urls, target_count=100):
              base_url = 'https://mecabricks.com'
              visited = set()
              queue = deque([base_url])
              need_to_archive_urls = set()
              headers = {
                  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                  'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                  'Accept-Language': 'en-US,en;q=0.5',
                  'Connection': 'keep-alive',
              }
              
              while queue and len(need_to_archive_urls) < target_count:
                  current_url = queue.popleft()
                  if current_url in visited:
                      continue
                      
                  visited.add(current_url)
                  print(f"Scraping: {current_url}")
                  
                  try:
                      response = requests.get(
                          current_url, 
                          headers=headers, 
                          timeout=30,
                          allow_redirects=True
                      )
                      response.raise_for_status()
                      
                      soup = BeautifulSoup(response.text, 'html.parser')
                      
                      # First try to find model URLs (priority)
                      model_links = soup.find_all('a', href=lambda x: x and '/models/' in x)
                      for link in model_links:
                          href = link.get('href')
                          if href:
                              full_url = urljoin(base_url, href)
                              if is_valid_url(full_url) and not check_already_archived(full_url, already_archived_urls):
                                  need_to_archive_urls.add(full_url)
                                  if full_url not in visited:
                                      queue.append(full_url)
                      
                      # Then get other mecabricks URLs
                      for link in soup.find_all('a', href=True):
                          href = link['href']
                          full_url = urljoin(current_url, href)
                          
                          if not is_valid_url(full_url) or 'mecabricks.com' not in full_url:
                              continue
                          
                          if not check_already_archived(full_url, already_archived_urls):
                              need_to_archive_urls.add(full_url)
                              if full_url not in visited:
                                  queue.append(full_url)
                      
                      print(f"Found {len(need_to_archive_urls)} URLs to archive so far")
                      
                      # Sleep between requests
                      time.sleep(3)
                      
                  except requests.exceptions.RequestException as e:
                      print(f"Network error scraping {current_url}: {str(e)}")
                      time.sleep(5)  # Longer sleep on error
                  except Exception as e:
                      print(f"Error scraping {current_url}: {str(e)}")
                      time.sleep(2)
              
              return list(need_to_archive_urls)
          
          # Load already archived URLs
          already_archived_urls = set()
          try:
              with open('already_archived.txt', 'r', encoding='utf-8') as f:
                  already_archived_urls = set(line.strip() for line in f if line.strip())
          except:
              print("No already_archived.txt file found, creating a new one")
              with open('already_archived.txt', 'w', encoding='utf-8') as f:
                  pass
          
          # First try to get URLs from file
          all_urls = extract_urls('pasted_urls.txt')
          
          # Filter out already archived URLs
          urls_to_archive = []
          for url in all_urls:
              if not check_already_archived(url, already_archived_urls):
                  urls_to_archive.append(url)
          
          # If no URLs found or all URLs are already archived, scrape mecabricks.com
          if not urls_to_archive:
              print("No new URLs found in file, scraping mecabricks.com...")
              urls_to_archive = scrape_mecabricks(already_archived_urls, 100)
          
          # Write URLs that need archiving to file
          with open('to_archive.txt', 'w', encoding='utf-8') as f:
              for url in urls_to_archive:
                  f.write(f"{url}\n")
          
          print(f"Total URLs to archive: {len(urls_to_archive)}")
          EOF
      
      - name: Archive URLs
        run: |
          # Function to retry curl with backoff
          function retry_curl() {
            local url=$1
            local max_attempts=3
            local attempt=1
            local wait_time=5
            
            while [ $attempt -le $max_attempts ]; do
              response=$(curl -sS --max-time 30 "$url" 2>&1)
              if [ $? -eq 0 ]; then
                echo "$response"
                return 0
              fi
              echo "$(date): Attempt $attempt failed for $url. Retrying in ${wait_time}s..."
              sleep $wait_time
              wait_time=$((wait_time * 2))
              attempt=$((attempt + 1))
            done
            
            echo "error"
            return 1
          }
          
          # Get original hash
          original_hash=$(git hash-object pasted_urls.txt || echo "")
          
          # Initialize files if they don't exist
          touch failed_urls.txt
          
          # Process URLs directly from to_archive.txt, no need to check again
          cat to_archive.txt | while IFS= read -r url || [ -n "$url" ]; do 
            if [ -z "$url" ]; then
              continue
            fi
            
            if [[ "$url" == *"reddit.com"* && "$url" != *"old.reddit.com"* ]]; then
              old_url=$(echo "$url" | sed 's/reddit.com/old.reddit.com/')
              urls=("$url" "$old_url")
            else
              urls=("$url")
            fi
            
            for process_url in "${urls[@]}"; do
              if [ -z "$process_url" ]; then
                continue
              fi
              
              echo "$(date): Archiving: $process_url"
              if retry_curl "https://web.archive.org/save/$process_url" > /dev/null; then
                echo "$process_url" >> already_archived.txt
                sleep 5
              else
                echo "$(date): Failed to archive after retries: $process_url"
                echo "$process_url" >> failed_urls.txt
              fi
            done
          done || true
          
          # Update files if no conflicts
          current_hash=$(git hash-object pasted_urls.txt 2>/dev/null || echo "")
          if [ "$original_hash" = "$current_hash" ]; then
            sort -u already_archived.txt -o already_archived.txt 2>/dev/null || true
            
            # Only sort and add failed_urls.txt if it exists
            if [ -f failed_urls.txt ]; then
              sort -u failed_urls.txt -o failed_urls.txt 2>/dev/null || true
              git add failed_urls.txt
            fi
            
            # Remove processed URLs from pasted_urls.txt
            if [ -s to_archive.txt ]; then
              grep -vxFf to_archive.txt pasted_urls.txt 2>/dev/null | sort -u > pasted_urls_new.txt || true
              mv pasted_urls_new.txt pasted_urls.txt
            fi
            
            git add pasted_urls.txt already_archived.txt
            git commit -m "Update archived URLs and remaining URLs" && git push || echo "Skipping commit due to conflict"
          fi
          
          # Cleanup
          rm -f to_archive.txt
